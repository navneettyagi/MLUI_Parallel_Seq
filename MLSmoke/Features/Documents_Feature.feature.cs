// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MLAutoFramework.MLSmoke.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Documents_Feature")]
    public partial class Documents_FeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Documents_Feature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Documents_Feature", "\tDescription: This feature will test the Document functionality", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the Printing of Docs For Banker System")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public virtual void VerifyThePrintingOfDocsForBankerSystem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Printing of Docs For Banker System", new string[] {
                        "smoke"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And("User Attached document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("User Click on Display Link of the uploaded document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
     testRunner.Then("Print button Should be displayed in the Print Preview Window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the Attaching of PDF Document less than 4mb")]
        public virtual void VerifyTheAttachingOfPDFDocumentLessThan4Mb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Attaching of PDF Document less than 4mb", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.And("User Attached document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
     testRunner.Then("The same PDF document should be displayed in the scanned /Uploaded documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the Attaching of PDF Document more than 4mb")]
        public virtual void VerifyTheAttachingOfPDFDocumentMoreThan4Mb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the Attaching of PDF Document more than 4mb", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
  testRunner.And("User Attached pdf document of more than 4mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
     testRunner.Then("Pop Up should be displayed as the file you are transferring is too big", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the visibility of the document to the consumer")]
        public virtual void VerifyTheVisibilityOfTheDocumentToTheConsumer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the visibility of the document to the consumer", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.And("User Attached document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.And("Click on show consumer link of the uploaded document  coming in the scanned/uploa" +
                    "ded document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
     testRunner.Then("YES should be displayed In the consumer column of the uploaded document present i" +
                    "n the Scanned / uploaded Documents section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the sharing of the PDF document on the generated URL")]
        public virtual void VerifyTheSharingOfThePDFDocumentOnTheGeneratedURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the sharing of the PDF document on the generated URL", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
  testRunner.And("Upload the PDF document less than 3.91 mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
     testRunner.Then("The same PDF document should be displayed in the scanned /Uploaded documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the PDF document of more than 3.91mb must not be shared on the generated U" +
            "RL")]
        public virtual void VerifyThePDFDocumentOfMoreThan3_91MbMustNotBeSharedOnTheGeneratedURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the PDF document of more than 3.91mb must not be shared on the generated U" +
                    "RL", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
  testRunner.And("Upload the PDF document of more than 3.91 mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
     testRunner.Then("The file you are transferring is too big Max file size is 3.91MB Message should b" +
                    "e there", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the JPG document must not be shared on the generated URL")]
        public virtual void VerifyTheJPGDocumentMustNotBeSharedOnTheGeneratedURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the JPG document must not be shared on the generated URL", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("Upload the JPG document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
     testRunner.Then("File type of JPG not allowed Message should be there", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the five PDF document must be shared on the generated URL")]
        public virtual void VerifyTheFivePDFDocumentMustBeSharedOnTheGeneratedURL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the five PDF document must be shared on the generated URL", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("Upload five PDF documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And("Close the file share page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("Refresh the Letter docs page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
     testRunner.Then("All the five PDF document should be displayed in the scanned /Uploaded documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the PNG document must not be shared on the generated link")]
        public virtual void VerifyThePNGDocumentMustNotBeSharedOnTheGeneratedLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the PNG document must not be shared on the generated link", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.And("Upload the PNG Document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
     testRunner.Then("File type of PNG not allowed Message should be there should be there", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the six PDF document must not be shared on the generated link")]
        public virtual void VerifyTheSixPDFDocumentMustNotBeSharedOnTheGeneratedLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the six PDF document must not be shared on the generated link", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
     testRunner.When("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
  testRunner.And("User navigates to letter docs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("Copy the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("Open the generated URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("Upload five PDF documents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
     testRunner.Then("Upload Document button should not be there after uploading five PDFs document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the multiple PDF should be displayed at the same time")]
        public virtual void VerifyTheMultiplePDFShouldBeDisplayedAtTheSameTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the multiple PDF should be displayed at the same time", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
     testRunner.When("User navigates to letter docs templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
  testRunner.And("User Add PDF in the vehicle module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
  testRunner.And("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
  testRunner.And("User Creates a new Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.And("User check the multiple pdf and click on display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
     testRunner.Then("Checked PDFs should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the PDFs should be saved as incomplete PDF")]
        public virtual void VerifyThePDFsShouldBeSavedAsIncompletePDF()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the PDFs should be saved as incomplete PDF", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
     testRunner.When("User navigates to letter docs templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
  testRunner.And("User Add PDF in the vehicle module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And("User selects Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("User Creates a new Vehicle APP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("User check the multiple pdf and click on display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
     testRunner.Then("PDFs should be available in Incomplete PDF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the PDF should be open through NG Mapper")]
        public virtual void VerifyThePDFShouldBeOpenThroughNGMapper()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the PDF should be open through NG Mapper", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
  testRunner.Given("User Login successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
     testRunner.When("User navigates to letter docs templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
  testRunner.And("User Add PDF in the vehicle module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
  testRunner.And("User Opens the PDF document in NG Mapper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
     testRunner.Then("PDF document should be opened in PDF Mapper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

